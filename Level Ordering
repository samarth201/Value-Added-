/*
Use linked list concept to solve the problem, otherwise you will be disqualified from the contest.
*/

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct node{
    int key;
    struct node *left,*right;
};
struct node* newNode(int data){
    struct node* temp
        = (struct node*)malloc(sizeof(struct node));
    temp->key = data;
    temp->left = temp->right = NULL;
    return temp;
}
// void inorder(struct node* root)
// {
//     if (root != NULL) {
        
//         printf("%d ", root->key);
//         inorder(root->left);
//         inorder(root->right);
//     }
// }
struct node* insertNode(struct node* node, int key){
    if (node == NULL)
        return newNode(key);
    /* Otherwise, recur down the tree */
    if (key%4==0)
        node->left = insertNode(node->left, key);
    else if (key%4!=0)
        node->right = insertNode(node->right, key);
    return node;
}
void printLevelOrder(struct node* root)
{
    int h = height(root);
    int i;
    for (i = 1; i <= h; i++)
        printCurrentLevel(root, i);
}
 
/* Print nodes at a current level */
void printCurrentLevel(struct node* root, int level)
{
    if (root == NULL)
        return;
    if (level == 1)
        printf("%d ", root->key);
    else if (level > 1) {
        printCurrentLevel(root->left, level - 1);
        printCurrentLevel(root->right, level - 1);
    }
}
 
/* Compute the "height" of a tree -- the number of
    nodes along the longest path from the root node
    down to the farthest leaf node.*/
int height(struct node* node)
{
    if (node == NULL)
        return 0;
    else {
        /* compute the height of each subtree */
        int lheight = height(node->left);
        int rheight = height(node->right);
 
        /* use the larger one */
        if (lheight > rheight)
            return (lheight + 1);
        else
            return (rheight + 1);
    }
}
 
int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    int t=0;
    scanf("%d",&t);
    for(int i=0;i<t;i++){
        int n=0;
        scanf("%d",&n);
        int arr[n];
        struct node* root=NULL;
        for(int j=0;j<n;j++)    
            scanf("%d",&arr[j]);
        root=insertNode(root,arr[0]);
        for(int j=1;j<n;j++)
            insertNode(root,arr[j]);
        printLevelOrder(root);
        printf("\n");
    }
    return 0;
}

